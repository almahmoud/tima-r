[{"path":[]},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@rstudio.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to timaR","title":"Contributing to timaR","text":"outlines propose change timaR. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to timaR","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to timaR","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to timaR","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"taxonomicallyinformedannotation/tima-r\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to timaR","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to timaR","text":"Please note timaR project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <https://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <https://www.gnu.org/licenses/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with timaR","title":"Getting help with timaR","text":"Thanks using timaR! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with timaR","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with timaR","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr , :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with timaR","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/I-intro.html","id":"philosophy","dir":"Articles","previous_headings":"","what":"Philosophy","title":"0 General comments about the infrastructure","text":"main goals flexibility reproducibility.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/I-intro.html","id":"flexibility","dir":"Articles","previous_headings":"Philosophy","what":"Flexibility","title":"0 General comments about the infrastructure","text":"ensure flexibility, tried split process much tiny parts needed. can decide whether skip optional part, add processing, etc. tried cover use cases, course exhaustive. feel like something useful users missing, please fill issue.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/I-intro.html","id":"reproducibility","dir":"Articles","previous_headings":"Philosophy","what":"Reproducibility","title":"0 General comments about the infrastructure","text":"time using TIMA, probably wonder: “parameters used generate file?” … collaborator might ask share data parameters. Writing time might time consuming really line modern computational approaches. Therefore, chose implement parameters steps (almost…) YAML files. human-readable can used batches. like YAML, parameters steps can also given command line arguments. saved YAML able share.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/I-intro.html","id":"use","dir":"Articles","previous_headings":"","what":"Use","title":"0 General comments about the infrastructure","text":"step detailed related vignettes. coming steps admit already cloned repository went root:","code":"git clone https://github.com/taxonomicallyinformedannotation/tima-r.git cd tima-r"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/I-intro.html","id":"copy-initial-parameters","dir":"Articles","previous_headings":"Use","what":"Copy initial parameters","title":"0 General comments about the infrastructure","text":"mentioned previously, scripts need parameters filled. pre-defined parameters given config/default directory. help understanding workflow works can adapt later data. first, start copying config/params directory. : now parameters copied config/params directory, can start modifying according data. command can adapted automatically change main parameters whole workflow. interested feature, ’ll probably find . now recommend read next vignette.","code":"Rscript inst/scripts/prepare_params.R"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/II-library.html","id":"lotus","dir":"Articles","previous_headings":"","what":"LOTUS","title":"1 Preparing your structure-organism pairs library","text":"developed LOTUS1 Taxonomically Informed Metabolite Annotation mind, provide starting point structure-organism pairs library. free complement structure-organism pairs filter according needs. also provide hints later vignette.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/II-library.html","id":"download","dir":"Articles","previous_headings":"LOTUS","what":"download","title":"1 Preparing your structure-organism pairs library","text":"download LOTUS structure-organism pairs locally, just run:","code":"library(\"timaR\") source(file = \"inst/scripts/get_lotus.R\") #> This script downloads LOTUS referenced structure-organism pairs.  #> 2022-11-10 13:31:19 Authors:  AR  #>   #> 2022-11-10 13:31:19 Contributors: ...  #> 2022-11-10 13:31:19 Loading paths #> Warning: One or more parsing issues, call `problems()` on your data frame for details, #> e.g.: #>   dat <- vroom(...) #>   problems(dat) #> Rows: 782554 Columns: 38 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (31): structure_wikidata, structure_inchikey, structure_inchi, structure... #> dbl  (6): structure_exact_mass, structure_xlogp, structure_stereocenters_tot... #> lgl  (1): manual_validation #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:32:52 Script finished in 1.547703 mins"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/II-library.html","id":"preparation","dir":"Articles","previous_headings":"LOTUS","what":"preparation","title":"1 Preparing your structure-organism pairs library","text":", LOTUS structure-organism pairs can prepared right format processing: two first steps, need change parameters implemented default.","code":"source(file = \"inst/scripts/prepare_lotus.R\") #> 2022-11-10 13:32:52 This script prepares LOTUS referenced structure-organism pairs  #>   #> 2022-11-10 13:32:52 Authors:  AR  #>   #> 2022-11-10 13:32:52 Contributors: ...  #> 2022-11-10 13:32:52 Loading paths  #> 2022-11-10 13:32:52 Loading files #> Rows: 782554 Columns: 38 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (31): structure_wikidata, structure_inchikey, structure_inchi, structure... #> dbl  (6): structure_exact_mass, structure_xlogp, structure_stereocenters_tot... #> lgl  (1): manual_validation #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:33:32 Exporting ...  #> 2022-11-10 13:33:40 Script finished in 47.97712 secs"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/II-library.html","id":"other-libraries","dir":"Articles","previous_headings":"","what":"Other libraries","title":"1 Preparing your structure-organism pairs library","text":"want tool flexible, can also add library LOTUS. just need format order compatible. example, prepared ways format closed, house libraries. need help formatting library like share us implemented, feel free contact us. running corresponding code, forget modify config/params/prepare_closed.yaml","code":"source(file = \"inst/scripts/prepare_closed.R\") #> 2022-11-10 13:33:40 This script prepares closed referenced structure-organism pairs  #>   #> 2022-11-10 13:33:40 Authors:  AR  #>   #> 2022-11-10 13:33:40 Contributors: ...  #> 2022-11-10 13:33:40 Loading paths  #> 2022-11-10 13:33:40 Loading yaml parameters  #> 2022-11-10 13:33:40 Loading command line arguments  #> 2022-11-10 13:33:40 Sorry, you do not have access to the closed resource  #> 2022-11-10 13:33:40 Script finished in 0.07512498 secs"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/II-library.html","id":"merging","dir":"Articles","previous_headings":"","what":"Merging","title":"1 Preparing your structure-organism pairs library","text":"sub-libraries prepared, ready merge single file used next steps. running corresponding code, forget modify config/params/prepare_library.yaml. step, want , can restrict library specific taxa . advise , offer possibility .","code":"source(file = \"inst/scripts/prepare_library.R\") #> 2022-11-10 13:33:40 This script prepares a library from prepared sub-libraries.  #>   #> 2022-11-10 13:33:40 Authors:  AR  #>   #> 2022-11-10 13:33:40 Contributors: ...  #> 2022-11-10 13:33:40 Loading paths  #> 2022-11-10 13:33:40 Loading yaml parameters  #> 2022-11-10 13:33:40 Loading command line arguments  #> 2022-11-10 13:33:40 Loading and concatenating prepared libraries #> Rows: 779214 Columns: 21 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (19): structure_nameTraditional, structure_inchikey_2D, structure_smiles... #> dbl  (2): structure_exact_mass, structure_xlogp #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:33:52 Exporting ...  #> 2022-11-10 13:33:52 ... path to export is data/interim/libraries/library.tsv.gz  #> 2022-11-10 13:34:00 ... path to used parameters is data/interim/config  #> 2022-11-10 13:34:00 Script finished in 19.76669 secs"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/II-library.html","id":"adducts-library","dir":"Articles","previous_headings":"","what":"Adducts library","title":"1 Preparing your structure-organism pairs library","text":"main limitation current annotation tools adducts detection coverage, adducts library can also generated order perform MS1 annotation later . running corresponding code, forget modify config/params/prepare_adducts.yaml. now recommend read next vignette.","code":"source(file = \"inst/scripts/prepare_adducts.R\") #> 2022-11-10 13:34:00 This script prepares adducts  #> 2022-11-10 13:34:00 Authors:  AR  #>   #> 2022-11-10 13:34:00 Contributors: ...  #> 2022-11-10 13:34:00 Loading paths  #> 2022-11-10 13:34:00 Loading yaml parameters  #> 2022-11-10 13:34:00 Loading command line arguments  #> 2022-11-10 13:34:00 Loading files ...  #> 2022-11-10 13:34:00 ... exact masses #> Rows: 779214 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> dbl (1): structure_exact_mass #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:34:03 ... adducts #> Rows: 18 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (1): adduct #> dbl (1): mass #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:34:03 Treating adducts table #> Warning in data.frame(..., check.names = FALSE): row names were found from a #> short variable and have been discarded #> 2022-11-10 13:34:03 Adding adducts to exact masses ...  #> 2022-11-10 13:34:03 ... positive  #> 2022-11-10 13:34:03 ... negative  #> 2022-11-10 13:34:03 ... pure adducts masses ...  #> 2022-11-10 13:34:03 ... positive  #> 2022-11-10 13:34:03 ... negative  #> 2022-11-10 13:34:03 Exporting ...  #> 2022-11-10 13:34:03 ... structure adducts positive  #> 2022-11-10 13:34:07 ... structure adducts negative  #> 2022-11-10 13:34:09 ... adducts masses positive  #> 2022-11-10 13:34:09 ... adducts masses negative  #> 2022-11-10 13:34:09 ... path to used parameters is data/interim/config  #> 2022-11-10 13:34:09 Script finished in 8.446924 secs"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/III-formatting.html","id":"structural-annotations-of-your-features","dir":"Articles","previous_headings":"","what":"Structural annotations of your features","title":"2 Formatting all inputs","text":"moment, support annotations coming 3 different annotation tools: GNPS, SIRIUS lab developed tool, ISDB. hope soon implement SIRIUS support. order perform MS2 annotation based Silico DataBase, please follow following repository: spectral_lib_matcher Sirius GNPS, please follow documentation.","code":""},{"path":[]},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/III-formatting.html","id":"isdb","dir":"Articles","previous_headings":"Structural annotations of your features > Get an example","what":"ISDB","title":"2 Formatting all inputs","text":"spectral_lib_matcher python, moment, provide example output coming new ISDB. working better integration. comes default, need modify parameters","code":"library(\"timaR\") source(file = \"inst/scripts/get_example_isdb.R\") #> 2022-11-10 13:34:14 This script downloads an example of spectral_lib_matcher (ISDB) output.  #>   #> 2022-11-10 13:34:14 Authors:  AR  #>   #> 2022-11-10 13:34:14 Contributors: ...  #> 2022-11-10 13:34:14 Loading paths #> Rows: 141495 Columns: 7 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (3): short_inchikey, smiles, molecular_formula #> dbl (4): msms_score, matched_peaks, feature_id, exact_mass #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:34:17 Script finished in 2.796191 secs"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/III-formatting.html","id":"sirius","dir":"Articles","previous_headings":"Structural annotations of your features > Get an example","what":"SIRIUS","title":"2 Formatting all inputs","text":"SIRIUS jobs long perform, provide already computed SIRIUS Workspace. beeen generated MGF GNPS ISDB jobs following command: config --IsotopeSettings.filter true --FormulaSearchDB BIO,COCONUT,GNPS,KNAPSACK,UNDP,PLANTCYC --Timeout.secondsPerTree 0 --FormulaSettings.enforced HCNOP --Timeout.secondsPerInstance 0 --AdductSettings.detectable [[M + H3N + H]+, [M - H2O + H]+, [M + K]+, [M - H4O2 + H]+, [M + H]+, [M + Na]+] --UseHeuristic.mzToUseHeuristicOnly 650 --AlgorithmProfile orbitrap --IsotopeMs2Settings IGNORE --MS2MassDeviation.allowedMassDeviation 5.0ppm --NumberOfCandidatesPerIon 1 --UseHeuristic.mzToUseHeuristic 300 --FormulaSettings.detectable B,Cl,Br,Se,S --NumberOfCandidates 10 --ZodiacNumberOfConsideredCandidatesAt300Mz 10 --ZodiacRunInTwoSteps true --ZodiacEdgeFilterThresholds.minLocalConnections 10 --ZodiacEdgeFilterThresholds.thresholdFilter 0.95 --ZodiacEpochs.burnInPeriod 2000 --ZodiacEpochs.numberOfMarkovChains 10 --ZodiacNumberOfConsideredCandidatesAt800Mz 50 --ZodiacEpochs.iterations 20000 --AdductSettings.enforced , --AdductSettings.fallback [[M + K]+, [M + H]+, [M + Na]+] --FormulaResultThreshold true --InjectElGordoCompounds true --StructureSearchDB BIO,COCONUT,GNPS,KNAPSACK,UNDP,PLANTCYC --RecomputeResults false formula zodiac fingerprint structure canopus parameters optimized used give example output. , summaries generated using: sirius -inst/extdata/interim/annotations/sirius_example/ write-summaries -c --digits 3 can get example running:","code":"source(file = \"inst/scripts/get_example_sirius.R\") #> 2022-11-10 13:34:17 This script downloads an example of SIRIUS output.  #>   #> 2022-11-10 13:34:17 Authors:  AR  #>   #> 2022-11-10 13:34:17 Contributors: ... #> Timeout for download is 600 seconds #> 2022-11-10 13:34:17 Loading paths #> Downloading #> Unzipping #> 2022-11-10 13:35:18 Script finished in 1.017458 mins"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/III-formatting.html","id":"gnps","dir":"Articles","previous_headings":"Structural annotations of your features > Get an example","what":"GNPS","title":"2 Formatting all inputs","text":"also provide example GNPS job id, : 96fa7c88200e4a03bee4644e581e3fb0","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/III-formatting.html","id":"formatting","dir":"Articles","previous_headings":"Structural annotations of your features","what":"Formatting","title":"2 Formatting all inputs","text":"running corresponding code, forget modify config/params/prepare_*yourAnnotationTool*.yaml. Depending annotation tool used, can format results using: now annotations well prepared can keep formatting rest metadata","code":"source(file = \"inst/scripts/prepare_gnps.R\") #> 2022-11-10 13:35:18 This script formats GNPS (and NAP) results  #> 2022-11-10 13:35:18 Authors:  AR  #>   #> 2022-11-10 13:35:18 Contributors: ...  #> 2022-11-10 13:35:18 Loading paths  #> 2022-11-10 13:35:18 Loading yaml parameters  #> 2022-11-10 13:35:18 Loading command line arguments  #> 2022-11-10 13:35:18 Loading and formatting GNPS results  #> 2022-11-10 13:35:18 Trying to look for already computed metadata #> Rows: 526745 Columns: 4 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (3): structureCleaned_smiles2D, structureCleaned_inchikey2D, structureCl... #> dbl (1): structureCleaned_exactMass #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 769 Columns: 46 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (29): SpectrumID, Compound_Name, Ion_Source, Instrument, Compound_Source... #> dbl (17): Precursor_MZ, ExactMass, Charge, Library_Class, #Scan#, MQScore, T... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = \"inchikey_2D\" #> 2022-11-10 13:35:29 Exporting ...  #> 2022-11-10 13:35:29 ... path to export is data/interim/annotations/96fa7c88200e4a03bee4644e581e3fb0_gnps_pretreated.tsv.gz  #> 2022-11-10 13:35:29 ... path to used parameters is data/interim/config  #> 2022-11-10 13:35:29 Script finished in 10.52522 secs source(file = \"inst/scripts/prepare_isdb.R\") #> 2022-11-10 13:35:29 This script formats ISDB results  #> 2022-11-10 13:35:29 Authors:  AR  #>   #> 2022-11-10 13:35:29 Contributors: ...  #> 2022-11-10 13:35:29 Loading paths  #> 2022-11-10 13:35:29 Loading yaml parameters  #> 2022-11-10 13:35:29 Loading command line arguments  #> 2022-11-10 13:35:29 Loading and formatting ISDB results  #> 2022-11-10 13:35:29 Trying to look for already computed metadata #> Rows: 526745 Columns: 4 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (3): structureCleaned_smiles2D, structureCleaned_inchikey2D, structureCl... #> dbl (1): structureCleaned_exactMass #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 141495 Columns: 7 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (3): short_inchikey, smiles, molecular_formula #> dbl (4): msms_score, matched_peaks, feature_id, exact_mass #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = \"inchikey_2D\" #> 2022-11-10 13:35:38 Exporting ...  #> 2022-11-10 13:35:38 ... path to export is data/interim/annotations/96fa7c88200e4a03bee4644e581e3fb0_isdb_pretreated.tsv.gz  #> 2022-11-10 13:35:39 ... path to used parameters is data/interim/config  #> 2022-11-10 13:35:39 Script finished in 10.39302 secs source(file = \"inst/scripts/prepare_sirius.R\") #> 2022-11-10 13:35:39 This script formats SIRIUS results  #> 2022-11-10 13:35:39 Authors:  AR  #>   #> 2022-11-10 13:35:39 Contributors: ...  #> 2022-11-10 13:35:39 Loading paths  #> 2022-11-10 13:35:39 Loading yaml parameters  #> 2022-11-10 13:35:39 Loading command line arguments  #> 2022-11-10 13:35:40 Loading and formatting SIRIUS results #> Rows: 5070 Columns: 20 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (12): id, molecularFormula, adduct, NPC#pathway, NPC#superclass, NPC#cla... #> dbl  (8): NPC#pathway Probability, NPC#superclass Probability, NPC#class Pro... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 6158 Columns: 17 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (5): molecularFormula, adduct, precursorFormula, lipidClass, id #> dbl (12): rank, ZodiacScore, SiriusScore, TreeScore, IsotopeScore, numExplai... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 6158 Columns: 17 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (5): molecularFormula, adduct, precursorFormula, lipidClass, id #> dbl (12): rank, ZodiacScore, SiriusScore, TreeScore, IsotopeScore, numExplai... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 5024 Columns: 21 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (10): ConfidenceScore, molecularFormula, adduct, InChIkey2D, InChI, name... #> dbl (11): rank, formulaRank, #adducts, #predictedFPs, CSI:FingerIDScore, Zod... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 5024 Columns: 21 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (10): ConfidenceScore, molecularFormula, adduct, InChIkey2D, InChI, name... #> dbl (11): rank, formulaRank, #adducts, #predictedFPs, CSI:FingerIDScore, Zod... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:40:18 Trying to look for already computed metadata #> Rows: 526745 Columns: 4 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (3): structureCleaned_smiles2D, structureCleaned_inchikey2D, structureCl... #> dbl (1): structureCleaned_exactMass #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Joining, by = c(\"feature_id\", \"molecular_formula\") #> Joining, by = \"feature_id\" #> Joining, by = \"inchikey_2D\" #> Warning: 9715 features have no exact mass. This is somehow unexpected and under investigation.2022-11-10 13:40:35 Exporting ...  #> 2022-11-10 13:40:35 ... path to export is data/interim/annotations/96fa7c88200e4a03bee4644e581e3fb0_sirius_pretreated.tsv.gz  #> 2022-11-10 13:40:39 ... path to used parameters is data/interim/config  #> 2022-11-10 13:40:39 Script finished in 5.001495 mins"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/III-formatting.html","id":"chemical-class-annotation-of-your-features","dir":"Articles","previous_headings":"","what":"Chemical class annotation of your features","title":"2 Formatting all inputs","text":"Within workflow, offer new way attribute chemical classes features. analog Network Annotation Propagation, uses edges network instead clusters. makes sense view, also recently illustrated CANOPUS. steps can take manual inputs GNPS metadata directly GNPS job ID. currently also working CANOPUS integration chemical class annotation implies way heavier computations want offer users fast solution.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/III-formatting.html","id":"case-when-no-network-available","dir":"Articles","previous_headings":"Chemical class annotation of your features","what":"Case when no network available","title":"2 Formatting all inputs","text":"network generated, simply use fake_edges fake_features_components steps instead prepare_edges prepare_features_components steps. mimic false network allows proceed next steps. However, help chemical weighting. needed, can get example minimal feature table look like running (parameters needed):","code":"source(file = \"inst/scripts/get_example_feature_table.R\") #> 2022-11-10 13:40:39 This script downloads an example of minimal feature table  #>   #> 2022-11-10 13:40:39 Authors:  AR  #>   #> 2022-11-10 13:40:39 Contributors: ...  #> 2022-11-10 13:40:39 Loading paths #> Rows: 7897 Columns: 3 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> dbl (3): RTMean, cluster index, precursor mass #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:40:42 Script finished in 2.370893 secs"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/III-formatting.html","id":"formatting-1","dir":"Articles","previous_headings":"Chemical class annotation of your features","what":"Formatting","title":"2 Formatting all inputs","text":"running corresponding code, forget modify config/params/prepare_edges.yaml, config/params/prepare_features_components.yaml, config/params/prepare_features_classification.yaml accordingly. features now informed structural information also, chemical class information. latter might corresponding chemical class annotated structure, depending consistency annotations.","code":"source(file = \"inst/scripts/prepare_edges.R\") #> 2022-11-10 13:40:42 This script prepares edges  #> 2022-11-10 13:40:42 Authors:  AR  #>   #> 2022-11-10 13:40:42 Contributors: ...  #> 2022-11-10 13:40:42 Loading paths  #> 2022-11-10 13:40:42 Loading yaml parameters  #> 2022-11-10 13:40:42 Loading command line arguments  #> 2022-11-10 13:40:42 Loading edge table #> Rows: 14453 Columns: 8 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (1): EdgeAnnotation #> dbl (7): CLUSTERID1, CLUSTERID2, DeltaMZ, MEH, Cosine, OtherScore, Component... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:40:43 Formatting edge table  #> 2022-11-10 13:40:43 Exporting ...  #> 2022-11-10 13:40:43 ... path to export is data/interim/edges/96fa7c88200e4a03bee4644e581e3fb0_edges.tsv.gz  #> 2022-11-10 13:40:43 ... path to used parameters is data/interim/config  #> 2022-11-10 13:40:43 Script finished in 1.286455 secs source(file = \"inst/scripts/prepare_features_components.R\") #> 2022-11-10 13:40:43 This script prepares features metadata (mz, rt and component id)  #> 2022-11-10 13:40:43 Authors:  AR  #>   #> 2022-11-10 13:40:43 Contributors: ...  #> 2022-11-10 13:40:43 Loading paths  #> 2022-11-10 13:40:43 Loading yaml parameters  #> 2022-11-10 13:40:43 Loading command line arguments  #> 2022-11-10 13:40:43 Loading files ...  #> 2022-11-10 13:40:43 ... features table #> Rows: 141887 Columns: 12 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (5): smiles, molecular_formula, inchikey_2D, library, smiles_2D #> dbl (3): feature_id, structure_exact_mass, score_input #> lgl (4): inchikey, structure_taxonomy_npclassifier_01pathway, structure_taxo... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:40:44 ... cluster table  #> 2022-11-10 13:40:44 THIS STEP CAN BE IMPROVED BY CALCULATING THE CLUSTERS WITHIN SPEC2VEC #> Rows: 7897 Columns: 32 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr  (8): ATTRIBUTE_species, GNPSLinkout_Cluster, GNPSLinkout_Network, INCHI... #> dbl (24): G1, G2, G3, G4, G5, G6, GNPSGROUP:Arnica montana, GNPSGROUP:BLK, G... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:40:46 Adding components to features #> Joining, by = \"feature_id\" #> 2022-11-10 13:40:47 Calculating mz error  #> 2022-11-10 13:40:47 Exporting ...  #> 2022-11-10 13:40:47 ... path to export is data/interim/annotations/96fa7c88200e4a03bee4644e581e3fb0_isdb_filled.tsv.gz  #> 2022-11-10 13:40:48 ... path to used parameters is data/interim/config  #> 2022-11-10 13:40:48 Script finished in 4.762443 secs source(file = \"inst/scripts/prepare_features_classification.R\") #> 2022-11-10 13:40:48 This script prepares features metadata (chemical classes)  #> 2022-11-10 13:40:48 Authors:  AR  #>   #> 2022-11-10 13:40:48 Contributors: ...  #> 2022-11-10 13:40:48 Loading paths  #> 2022-11-10 13:40:48 Loading yaml parameters  #> 2022-11-10 13:40:48 Loading command line arguments  #> 2022-11-10 13:40:48 Loading files ...  #> 2022-11-10 13:40:48 ... library #> Rows: 779214 Columns: 7 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (6): structure_inchikey_2D, structure_smiles_2D, structure_molecular_for... #> dbl (1): structure_exact_mass #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:40:53 ... features table #> Rows: 146988 Columns: 14 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (4): inchikey_2D, smiles_2D, molecular_formula, library #> dbl (7): feature_id, component_id, rt, mz, structure_exact_mass, score_input... #> lgl (3): structure_taxonomy_npclassifier_01pathway, structure_taxonomy_npcla... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:40:53 Filtering structures ...  #> 2022-11-10 13:40:53 ... missing classification  #> 2022-11-10 13:40:54 ... missing masses  #> 2022-11-10 13:40:54 ... missing formulas  #> 2022-11-10 13:40:54 ... keeping the other ones safe #> Joining, by = c(\"inchikey_2D\", \"smiles_2D\") #> Joining, by = c(\"inchikey_2D\", \"smiles_2D\") #> Joining, by = c(\"inchikey_2D\", \"smiles_2D\") #> 2022-11-10 13:40:54 Completing the structures with the library #> Joining, by = c(\"inchikey_2D\", \"smiles_2D\") #> Joining, by = c(\"inchikey_2D\", \"smiles_2D\") #> Joining, by = c(\"inchikey_2D\", \"smiles_2D\") #> 2022-11-10 13:40:55 Filtering structures again (to calculate this time) ... #> Joining, by = c(\"inchikey_2D\", \"smiles_2D\", #> \"structure_taxonomy_npclassifier_01pathway\", #> \"structure_taxonomy_npclassifier_02superclass\", #> \"structure_taxonomy_npclassifier_03class\") #> Joining, by = c(\"inchikey_2D\", \"smiles_2D\", \"structure_exact_mass\") #> Joining, by = c(\"inchikey_2D\", \"smiles_2D\", \"molecular_formula\") #> 2022-11-10 13:40:55 Calculation is not performed yet (TODO) ...  #> 2022-11-10 13:40:55 Recombining everything back together #> Joining, by = c(\"inchikey_2D\", \"smiles_2D\", #> \"structure_taxonomy_npclassifier_01pathway\", #> \"structure_taxonomy_npclassifier_02superclass\", #> \"structure_taxonomy_npclassifier_03class\") #> Joining, by = c(\"inchikey_2D\", \"smiles_2D\", \"molecular_formula\") #> Joining, by = c(\"inchikey_2D\", \"smiles_2D\", \"structure_exact_mass\") #> 2022-11-10 13:40:57 Exporting ...  #> 2022-11-10 13:40:57 ... path to export is data/interim/annotations/96fa7c88200e4a03bee4644e581e3fb0_isdb_treated.tsv.gz  #> 2022-11-10 13:41:01 ... path to used parameters is data/interim/config  #> 2022-11-10 13:41:01 Script finished in 12.8072 secs"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/articles/III-formatting.html","id":"biological-source-annotation","dir":"Articles","previous_headings":"","what":"Biological source annotation","title":"2 Formatting all inputs","text":"step allows attribute biological source information features. features come single extract, attribute biological source extract features. multiple extracts aligned, take n (according parameters) highest intensities aligned feature table attribute biological source corresponding extracts. can take manual inputs GNPS metadata directly GNPS job ID. running corresponding code, forget modify config/params/prepare_taxa.yaml. now recommend read next vignette.","code":"source(file = \"inst/scripts/prepare_taxa.R\") #> 2022-11-10 13:41:01 This script informs taxonomically features  #> 2022-11-10 13:41:01 Authors:  AR , PMA  #>   #> 2022-11-10 13:41:01 Contributors: ...  #> 2022-11-10 13:41:01 Loading paths  #> 2022-11-10 13:41:01 Loading yaml parameters  #> 2022-11-10 13:41:01 Loading command line arguments  #> 2022-11-10 13:41:01 Loading taxa ranks dictionary #> Rows: 17 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (2): taxaRank, taxaRankStandard #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:41:01 Loading feature table #> Rows: 7897 Columns: 9 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (9): row ID, row m/z, row retention time, 0_AR_Blk_C18_Pos.mzML Peak are... #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:41:02 Loading metadata table #> Rows: 6 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (2): filename, ATTRIBUTE_species #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> 2022-11-10 13:41:02 Formatting feature table ...  #> 2022-11-10 13:41:02 ... WARNING: requires 'Peak area' in columns (MZmine format)  #> 2022-11-10 13:41:02 ... filtering top K intensities per feature  #> 2022-11-10 13:41:03 Keeping list of organisms to submit to OTL #> Warning: BLK are not matched #> Joining, by = \"search_string\" #> 2022-11-10 13:41:04 Joining top K with metadata table  #> 2022-11-10 13:41:04 Joining with cleaned taxonomy table  #> 2022-11-10 13:41:06 Exporting ...  #> 2022-11-10 13:41:06 ... path to export is data/interim/taxa/96fa7c88200e4a03bee4644e581e3fb0_taxed.tsv.gz  #> 2022-11-10 13:41:06 ... path to used parameters is data/interim/config  #> 2022-11-10 13:41:06 Script finished in 5.065861 secs"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adriano Rutz. Author, maintainer. Pierre-Marie Allard. Contributor.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":" Adriano Rutz; Miwa Dounoue-Kubo; Simon Ollivier; et al. (25 October 2019). Taxonomically Informed Scoring Enhances Confidence Natural Products Annotation. Frontiers Plant Science. 10: 1329. doi:10.3389/FPLS.2019.01329. ISSN 1664-462X. PMC 6824209. PMID 31708947. Wikidata Q91218352.","code":"@Article{,   title = {Taxonomically Informed Scoring Enhances Confidence in Natural Products Annotation},   author = {Adriano Rutz and Miwa Dounoue-Kubo and Simon Ollivier and Jonathan Bisson and Mohsen Bagheri and Tongchai Saesong and Samad Nejad Ebrahimi and Kornkanok Ingkaninan and Jean-Luc Wolfender and Pierre-Marie Allard},   journal = {Frontiers in Plant Science},   year = {2019},   volume = {10},   url = {http://dx.doi.org/10.3389/fpls.2019.01329}, }"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/index.html","id":"taxonomically-informed-metabolite-annotation-","dir":"","previous_headings":"","what":"Taxonomically Informed Metabolite Annotation","title":"Taxonomically Informed Metabolite Annotation","text":"initial work available https://doi.org/10.3389/fpls.2019.01329, many improvements made since . workflow illustrated . Workflow repository contains everything needed perform Taxonomically Informed Metabolite Annotation. provided example well-known pharmacopoeia plants. minimally need: feature list without candidate annotations, using GNPS, can GNPS job ID. source organism extract annotating, associating metadata within GNPS, can GNPS job ID. edge list, using GNPS, can GNPS job ID. Optionally, may want add: -house structure-organism pairs library (provide LOTUS starting point user) manual automated annotations (currently support annotations coming ISDB SIRIUS (limitations))","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Taxonomically Informed Metabolite Annotation","text":"package (yet) available CRAN, need install development version, therefore: *nix systems: Windows: R directly: installed, ready go documentation, major steps detailed. forget clone repository (allow access default architecture, files, parameters): , copy defaut parameters: command also useful case want automate workflow. details given General comments infrastructure done, can start example using:","code":"Rscript -e 'if(!requireNamespace(\"remotes\")){install.packages(\"remotes\")} remotes::install_github(\"taxonomicallyinformedannotation/tima-r\")' Rscript -e \"if(!requireNamespace('remotes')){install.packages('remotes')} remotes::install_github('taxonomicallyinformedannotation/tima-r')\" if(!requireNamespace(\"remotes\", quietly = TRUE))     install.packages(\"remotes\") remotes::install_github(\"taxonomicallyinformedannotation/tima-r\") git clone https://github.com/taxonomicallyinformedannotation/tima-r.git cd tima-r Rscript inst/scripts/prepare_params.R Rscript inst/scripts/tima.R"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/index.html","id":"docker","dir":"","previous_headings":"Installation","what":"Docker","title":"Taxonomically Informed Metabolite Annotation","text":"container also available, together small compose. Main commands :","code":"docker build . -t tima-r docker compose up prepare_params docker compose up tima"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/index.html","id":"main-citations","dir":"","previous_headings":"","what":"Main Citations","title":"Taxonomically Informed Metabolite Annotation","text":"According steps used, please give credit authors tools/resources used.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/index.html","id":"tima","dir":"","previous_headings":"Main Citations","what":"TIMA","title":"Taxonomically Informed Metabolite Annotation","text":"General: https://doi.org/10.3389/fpls.2019.01329 ⚠️ forget cite version used: https://doi.org/10.5281/zenodo.5797920","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/index.html","id":"lotus","dir":"","previous_headings":"Main Citations","what":"LOTUS","title":"Taxonomically Informed Metabolite Annotation","text":"General: https://doi.org/10.7554/eLife.70780 ⚠️ forget cite version used: https://doi.org/10.5281/zenodo.5794106","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/index.html","id":"isdb","dir":"","previous_headings":"Main Citations","what":"ISDB","title":"Taxonomically Informed Metabolite Annotation","text":"General: https://doi.org/10.1021/acs.analchem.5b04804 ⚠️ forget cite version used: https://doi.org/10.5281/zenodo.5607185","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/index.html","id":"gnps","dir":"","previous_headings":"Main Citations","what":"GNPS","title":"Taxonomically Informed Metabolite Annotation","text":"General: https://doi.org/10.1038/nbt.3597","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/index.html","id":"sirius","dir":"","previous_headings":"Main Citations","what":"SIRIUS","title":"Taxonomically Informed Metabolite Annotation","text":"General: https://doi.org/10.1038/s41592-019-0344-8 CSI:FingerId: https://doi.org/10.1073/pnas.1509788112 ZODIAC: https://doi.org/10.1038/s42256-020-00234-6 CANOPUS: https://doi.org/10.1038/s41587-020-0740-8 COSMIC: https://doi.org/10.1038/s41587-021-01045-9","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/index.html","id":"others","dir":"","previous_headings":"Main Citations","what":"Others","title":"Taxonomically Informed Metabolite Annotation","text":"NPClassifier: https://doi.org/10.1021/acs.jnatprod.1c00399 ROTL: https://doi.org/10.1111/2041-210X.12593","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/annotate_ms1.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate MS1 — annotate_ms1","title":"Annotate MS1 — annotate_ms1","text":"Annotate MS1","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/annotate_ms1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate MS1 — annotate_ms1","text":"","code":"annotate_ms1(   annotationTable = metadata_table_spectral_annotation,   structureExactMassTable = structure_exact_mass_table,   structureOrganismPairsTable = structure_organism_pairs_table,   adducts = unlist(adducts_list[[ms_mode]]),   neutralLosses = neutral_losses_table,   msMode = ms_mode,   tolerancePpm = tolerance_ppm,   toleranceRt = tolerance_rt,   candidatesInitial = candidates_initial )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/annotate_ms1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate MS1 — annotate_ms1","text":"annotationTable TODO structureExactMassTable TODO structureOrganismPairsTable TODO adducts TODO neutralLosses TODO msMode TODO tolerancePpm TODO toleranceRt TODO candidatesInitial TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/annotate_ms1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate MS1 — annotate_ms1","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/annotate_ms1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate MS1 — annotate_ms1","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/annotate_non_ms1.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate non MS1 — annotate_non_ms1","title":"Annotate non MS1 — annotate_non_ms1","text":"Annotate non MS1","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/annotate_non_ms1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate non MS1 — annotate_non_ms1","text":"","code":"annotate_non_ms1(   annotationTable = metadata_table_spectral_annotation,   candidatesInitial = candidates_initial )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/annotate_non_ms1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate non MS1 — annotate_non_ms1","text":"annotationTable TODO candidatesInitial TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/annotate_non_ms1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate non MS1 — annotate_non_ms1","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/annotate_non_ms1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate non MS1 — annotate_non_ms1","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/complement_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Complement metadata — complement_metadata","title":"Complement metadata — complement_metadata","text":"Complement metadata","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/complement_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complement metadata — complement_metadata","text":"","code":"complement_metadata(df)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/complement_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complement metadata — complement_metadata","text":"df TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/complement_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Complement metadata — complement_metadata","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/complement_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complement metadata — complement_metadata","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake edges — fake_edges","title":"Fake edges — fake_edges","text":"Fake edges","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake edges — fake_edges","text":"","code":"fake_edges(   input = params$input,   output = params$output,   name_feature = params$feature )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fake edges — fake_edges","text":"input TODO output TODO name_feature TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fake edges — fake_edges","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fake edges — fake_edges","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_features_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake features components — fake_features_components","title":"Fake features components — fake_features_components","text":"Fake features components","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_features_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake features components — fake_features_components","text":"","code":"fake_features_components(   input = params$input,   features = params$features,   output = params$output,   ms_mode = params$mode,   name_rt = params$rt_name,   name_mz = params$precursor_name )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_features_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fake features components — fake_features_components","text":"input TODO features TODO output TODO ms_mode TODO name_rt TODO name_mz TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_features_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fake features components — fake_features_components","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_features_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fake features components — fake_features_components","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_no_rt.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake no retention time — fake_no_rt","title":"Fake no retention time — fake_no_rt","text":"Fake retention time","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_no_rt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake no retention time — fake_no_rt","text":"","code":"fake_no_rt(   input = paths$data$interim$annotations$example_feature_table,   output = paths$data$interim$annotations$example_feature_table_no_rt )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_no_rt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fake no retention time — fake_no_rt","text":"input TODO output TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_no_rt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fake no retention time — fake_no_rt","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/fake_no_rt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fake no retention time — fake_no_rt","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_benchmark.html","id":null,"dir":"Reference","previous_headings":"","what":"Get benchmark — get_benchmark","title":"Get benchmark — get_benchmark","text":"Get benchmark","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_benchmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get benchmark — get_benchmark","text":"","code":"get_benchmark(   url = paths$urls$benchmarking_set,   export = paths$data$source$benchmark$set )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_benchmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get benchmark — get_benchmark","text":"url TODO export TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_benchmark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get benchmark — get_benchmark","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_benchmark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get benchmark — get_benchmark","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_feature_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get example feature table — get_example_feature_table","title":"Get example feature table — get_example_feature_table","text":"Get example feature table","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_feature_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get example feature table — get_example_feature_table","text":"","code":"get_example_feature_table(   url = paths$urls$example_feature_table,   export = paths$data$interim$annotations$example_feature_table )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_feature_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get example feature table — get_example_feature_table","text":"url TODO export TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_feature_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get example feature table — get_example_feature_table","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_feature_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get example feature table — get_example_feature_table","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_isdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Get example ISDB — get_example_isdb","title":"Get example ISDB — get_example_isdb","text":"Get example ISDB","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_isdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get example ISDB — get_example_isdb","text":"","code":"get_example_isdb(   url = paths$urls$example_isdb,   export = paths$data$interim$annotations$example_isdb )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_isdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get example ISDB — get_example_isdb","text":"url TODO export TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_isdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get example ISDB — get_example_isdb","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_isdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get example ISDB — get_example_isdb","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_sirius.html","id":null,"dir":"Reference","previous_headings":"","what":"Get example sirius — get_example_sirius","title":"Get example sirius — get_example_sirius","text":"Get example sirius","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_sirius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get example sirius — get_example_sirius","text":"","code":"get_example_sirius(   url = paths$url$example_sirius,   export = paths$data$interim$annotations$example_sirius )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_sirius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get example sirius — get_example_sirius","text":"url TODO export TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_sirius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get example sirius — get_example_sirius","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_example_sirius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get example sirius — get_example_sirius","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_isdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ISDB — get_isdb","title":"Get ISDB — get_isdb","text":"Get ISDB","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_isdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ISDB — get_isdb","text":"","code":"get_isdb(   url_pos = paths$urls$isdb$pos,   url_neg = paths$urls$isdb$neg,   export_pos = paths$data$source$libraries$isdb$pos,   export_neg = paths$data$source$libraries$isdb$neg )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_isdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ISDB — get_isdb","text":"url_pos TODO url_neg TODO export_pos TODO export_neg TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_isdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ISDB — get_isdb","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_isdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ISDB — get_isdb","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_lotus.html","id":null,"dir":"Reference","previous_headings":"","what":"Get LOTUS — get_lotus","title":"Get LOTUS — get_lotus","text":"Get LOTUS","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_lotus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get LOTUS — get_lotus","text":"","code":"get_lotus(url = paths$urls$lotus, export = paths$data$source$libraries$lotus)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_lotus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get LOTUS — get_lotus","text":"url TODO export TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_lotus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get LOTUS — get_lotus","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/get_lotus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get LOTUS — get_lotus","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_adducts.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare adducts — prepare_adducts","title":"Prepare adducts — prepare_adducts","text":"Prepare adducts","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_adducts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare adducts — prepare_adducts","text":"","code":"prepare_adducts(   adducts_input = params$input,   adducts_table_input = paths$data$source$adducts,   config_output_path = paths$data$interim$config$path,   adducts_output_path = paths$data$interim$adducts$path,   output_name = params$output,   masses_pos_output_path = paths$data$interim$adducts$pos,   masses_neg_output_path = paths$data$interim$adducts$neg )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_adducts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare adducts — prepare_adducts","text":"adducts_input TODO adducts_table_input TODO config_output_path TODO adducts_output_path TODO output_name TODO masses_pos_output_path TODO masses_neg_output_path TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_adducts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare adducts — prepare_adducts","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_adducts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare adducts — prepare_adducts","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_closed.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare closed — prepare_closed","title":"Prepare closed — prepare_closed","text":"Prepare closed","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_closed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare closed — prepare_closed","text":"","code":"prepare_closed(input = params$input, output = params$output)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_closed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare closed — prepare_closed","text":"input TODO output TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_closed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare closed — prepare_closed","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_closed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare closed — prepare_closed","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare edges — prepare_edges","title":"Prepare edges — prepare_edges","text":"Prepare edges","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare edges — prepare_edges","text":"","code":"prepare_edges(   tool = params$tool,   gnps_job_id = params$gnps,   input = params$input,   output = params$output,   name_source = params$source_name,   name_target = params$target_name )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare edges — prepare_edges","text":"tool TODO gnps_job_id TODO input TODO output TODO name_source TODO name_target TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare edges — prepare_edges","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare edges — prepare_edges","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_features_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare features classification — prepare_features_classification","title":"Prepare features classification — prepare_features_classification","text":"Prepare features classification","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_features_classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare features classification — prepare_features_classification","text":"","code":"prepare_features_classification(   library = params$library,   input = params$input,   output = params$output,   quickmode = params$quickmode )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_features_classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare features classification — prepare_features_classification","text":"library TODO input TODO output TODO quickmode TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_features_classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare features classification — prepare_features_classification","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_features_classification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare features classification — prepare_features_classification","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_features_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare features components — prepare_features_components","title":"Prepare features components — prepare_features_components","text":"Prepare features components","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_features_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare features components — prepare_features_components","text":"","code":"prepare_features_components(   input = params$input,   output = params$output,   tool = params$tool,   components = params$components,   gnps_job_id = params$gnps,   ms_mode = params$mode )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_features_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare features components — prepare_features_components","text":"input TODO output TODO tool TODO components TODO gnps_job_id TODO ms_mode TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_features_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare features components — prepare_features_components","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_features_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare features components — prepare_features_components","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_gnps.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare GNPS — prepare_gnps","title":"Prepare GNPS — prepare_gnps","text":"Prepare GNPS","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_gnps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare GNPS — prepare_gnps","text":"","code":"prepare_gnps(   gnps_job_id = params$gnps,   nap_job_id = params$nap,   output = params$output )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_gnps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare GNPS — prepare_gnps","text":"gnps_job_id TODO nap_job_id TODO output TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_gnps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare GNPS — prepare_gnps","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_gnps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare GNPS — prepare_gnps","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_isdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare ISDB — prepare_isdb","title":"Prepare ISDB — prepare_isdb","text":"Prepare ISDB","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_isdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare ISDB — prepare_isdb","text":"","code":"prepare_isdb(input = params$input, output = params$output)"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_isdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare ISDB — prepare_isdb","text":"input TODO output TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_isdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare ISDB — prepare_isdb","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_isdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare ISDB — prepare_isdb","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_library.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare library — prepare_library","title":"Prepare library — prepare_library","text":"Prepare library","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_library.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare library — prepare_library","text":"","code":"prepare_library(   filter = params$filter$mode,   level = params$filter$level,   value = params$filter$value,   output = params$output )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_library.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare library — prepare_library","text":"filter TODO level TODO value TODO output TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_library.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare library — prepare_library","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_library.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare library — prepare_library","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_lotus.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare LOTUS — prepare_lotus","title":"Prepare LOTUS — prepare_lotus","text":"Prepare LOTUS","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_lotus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare LOTUS — prepare_lotus","text":"","code":"prepare_lotus(   input = paths$data$source$libraries$lotus,   output = paths$data$interim$libraries$lotus )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_lotus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare LOTUS — prepare_lotus","text":"input TODO output TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_lotus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare LOTUS — prepare_lotus","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_lotus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare LOTUS — prepare_lotus","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare parameters — prepare_params","title":"Prepare parameters — prepare_params","text":"Prepare parameters","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare parameters — prepare_params","text":"","code":"prepare_params(   filename = params$filename,   gnps_job_id = params$gnps,   candidates_initial = params$top_k$initial,   candidates_final = params$top_k$final,   weight_biological = params$weights$biological,   weight_chemical = params$weights$chemical,   weight_spectral = params$weights$spectral,   ms_mode = params$ms$mode,   annotate = params$ms$annotate,   tolerance_ppm = params$ms$tolerance$ppm,   tolerance_rt = params$ms$tolerance$rt,   taxon = params$taxon,   force = params$force )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare parameters — prepare_params","text":"filename TODO gnps_job_id TODO candidates_initial TODO candidates_final TODO weight_biological TODO weight_chemical TODO weight_spectral TODO ms_mode TODO annotate TODO tolerance_ppm TODO tolerance_rt TODO taxon TODO force TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare parameters — prepare_params","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare parameters — prepare_params","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_sirius.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare sirius — prepare_sirius","title":"Prepare sirius — prepare_sirius","text":"Prepare sirius","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_sirius.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare sirius — prepare_sirius","text":"","code":"prepare_sirius(   input_directory = params$directory,   npc = params$npc,   output = params$output )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_sirius.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare sirius — prepare_sirius","text":"input_directory TODO npc TODO output TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_sirius.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare sirius — prepare_sirius","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_sirius.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare sirius — prepare_sirius","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare taxa — prepare_taxa","title":"Prepare taxa — prepare_taxa","text":"Prepare taxa","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare taxa — prepare_taxa","text":"","code":"prepare_taxa(   input = params$input,   tool = params$tool,   extension = params$extension,   colname = params$column_name,   gnps_job_id = params$gnps,   metadata = params$metadata,   top_k = params$top_k,   output = params$output,   taxon = params$taxon )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare taxa — prepare_taxa","text":"input TODO tool TODO extension TODO colname TODO gnps_job_id TODO metadata TODO top_k TODO output TODO taxon TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare taxa — prepare_taxa","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/prepare_taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare taxa — prepare_taxa","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/process_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Process annotations — process_annotations","title":"Process annotations — process_annotations","text":"Process annotations","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/process_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process annotations — process_annotations","text":"","code":"process_annotations(   library = params$library,   name = params$name,   gnps = params$annotation$gnps,   isdb = params$annotation$isdb,   sirius = params$annotation$sirius,   taxa = params$taxa,   edges = params$edges,   output = params$output,   candidates_initial = params$top_k$initial,   candidates_final = params$top_k$final,   weight_spectral = params$weights$spectral,   weight_chemical = params$weights$chemical,   weight_biological = params$weights$biological,   score_chemical_pathway = params$scores$chemical$pathway,   score_chemical_superclass = params$scores$chemical$superclass,   score_chemical_class = params$scores$chemical$class,   score_biological_domain = params$scores$biological$domain,   score_biological_kingdom = params$scores$biological$kingdom,   score_biological_phylum = params$scores$biological$phylum,   score_biological_class = params$scores$biological$class,   score_biological_order = params$scores$biological$order,   score_biological_infraorder = params$scores$biological$infraorder,   score_biological_family = params$scores$biological$family,   score_biological_subfamily = params$scores$biological$subfamily,   score_biological_tribe = params$scores$biological$tribe,   score_biological_subtribe = params$scores$biological$subtribe,   score_biological_genus = params$scores$biological$genus,   score_biological_subgenus = params$scores$biological$subgenus,   score_biological_species = params$scores$biological$species,   score_biological_subspecies = params$scores$biological$subspecies,   score_biological_variety = params$scores$biological$variety,   ms_mode = params$ms$mode,   ms_level = params$ms$level,   annotate = params$ms$annotate,   tolerance_ppm = params$ms$tolerance$ppm,   tolerance_rt = params$ms$tolerance$rt,   adducts_list = params$ms$adducts,   minimal_ms1_bio = params$scores$biological$minimal,   minimal_ms1_chemo = params$scores$chemical$minimal,   ms1_only = params$ms$ms1only,   force = params$force )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/process_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process annotations — process_annotations","text":"library TODO name TODO gnps TODO isdb TODO sirius TODO taxa TODO edges TODO output TODO candidates_initial TODO candidates_final TODO weight_spectral TODO weight_chemical TODO weight_biological TODO score_chemical_pathway TODO score_chemical_superclass TODO score_chemical_class TODO score_biological_domain TODO score_biological_kingdom TODO score_biological_phylum TODO score_biological_class TODO score_biological_order TODO score_biological_infraorder TODO score_biological_family TODO score_biological_subfamily TODO score_biological_tribe TODO score_biological_subtribe TODO score_biological_genus TODO score_biological_subgenus TODO score_biological_species TODO score_biological_subspecies TODO score_biological_variety TODO ms_mode TODO ms_level TODO annotate TODO tolerance_ppm TODO tolerance_rt TODO adducts_list TODO minimal_ms1_bio TODO minimal_ms1_chemo TODO ms1_only TODO force TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/process_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process annotations — process_annotations","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/process_annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process annotations — process_annotations","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/weight_bio.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight bio — weight_bio","title":"Weight bio — weight_bio","text":"Weight bio","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/weight_bio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight bio — weight_bio","text":"","code":"weight_bio(   annotationTable = annotation_table_ms1_taxed,   structureOrganismPairsTable = structure_organism_pairs_table,   weightSpectral = weight_spectral,   weightBiological = weight_biological,   scoreBiologicalDomain = score_biological_domain,   scoreBiologicalKingdom = score_biological_kingdom,   scoreBiologicalPhylum = score_biological_phylum,   scoreBiologicalClass = score_biological_class,   scoreBiologicalOrder = score_biological_order,   scoreBiologicalFamily = score_biological_family,   scoreBiologicalTribe = score_biological_tribe,   scoreBiologicalGenus = score_biological_genus,   scoreBiologicalSpecies = score_biological_species,   scoreBiologicalVariety = score_biological_variety )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/weight_bio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight bio — weight_bio","text":"annotationTable TODO structureOrganismPairsTable TODO weightSpectral TODO weightBiological TODO scoreBiologicalDomain TODO scoreBiologicalKingdom TODO scoreBiologicalPhylum TODO scoreBiologicalClass TODO scoreBiologicalOrder TODO scoreBiologicalFamily TODO scoreBiologicalTribe TODO scoreBiologicalGenus TODO scoreBiologicalSpecies TODO scoreBiologicalVariety TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/weight_bio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weight bio — weight_bio","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/weight_bio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weight bio — weight_bio","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/weight_chemo.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight chemo — weight_chemo","title":"Weight chemo — weight_chemo","text":"Weight chemo","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/weight_chemo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight chemo — weight_chemo","text":"","code":"weight_chemo(   annotationTableWeightedBioCleaned = annotation_table_weighted_bio_cleaned,   weightSpectral = weight_spectral,   weightBiological = weight_biological,   weightChemical = weight_chemical,   scoreChemicalPathway = score_chemical_pathway,   scoreChemicalSuperclass = score_chemical_superclass,   scoreChemicalClass = score_chemical_class )"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/weight_chemo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight chemo — weight_chemo","text":"annotationTableWeightedBioCleaned TODO weightSpectral TODO weightBiological TODO weightChemical TODO scoreChemicalPathway TODO scoreChemicalSuperclass TODO scoreChemicalClass TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/weight_chemo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weight chemo — weight_chemo","text":"TODO","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/reference/weight_chemo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weight chemo — weight_chemo","text":"","code":"TODO #> Error in eval(expr, envir, enclos): object 'TODO' not found"},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-260","dir":"Changelog","previous_headings":"","what":"timaR 2.6.0","title":"timaR 2.6.0","text":"Added Docker container Changed data architecture Minor fixes","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-256","dir":"Changelog","previous_headings":"","what":"timaR 2.5.6","title":"timaR 2.5.6","text":"Minor fixes Partial functions cleanup Dependencies removal (e.g. metabo-store)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-255","dir":"Changelog","previous_headings":"","what":"timaR 2.5.5","title":"timaR 2.5.5","text":"Minor fixes Automation parameters improvement","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-254","dir":"Changelog","previous_headings":"","what":"timaR 2.5.4","title":"timaR 2.5.4","text":"Minor fixes Metadata completion improvement Molecular formula adducts formalism improvement","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-253","dir":"Changelog","previous_headings":"","what":"timaR 2.5.3","title":"timaR 2.5.3","text":"Imports improvements LOTUS update","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-252","dir":"Changelog","previous_headings":"","what":"timaR 2.5.2","title":"timaR 2.5.2","text":"Packaging improvements","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-251","dir":"Changelog","previous_headings":"","what":"timaR 2.5.1","title":"timaR 2.5.1","text":"Improved support SIRIUS (new summaries)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-250","dir":"Changelog","previous_headings":"","what":"timaR 2.5.0","title":"timaR 2.5.0","text":"Minor fixes LOTUS update","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-240","dir":"Changelog","previous_headings":"","what":"timaR 2.4.0","title":"timaR 2.4.0","text":"Minor fixes Improved output (#34) Added chemical names xlogp output (#33) Added support case consensus found (#30)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-230","dir":"Changelog","previous_headings":"","what":"timaR 2.3.0","title":"timaR 2.3.0","text":"Minor fixes Added support annotation without MN (#28) Added support multi tool annotations (#27) Added suport classical MN GNPS jobs (#25) Added support new version LOTUS General improvements manual inputs Updated adducts Improved tests code coverage","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-222","dir":"Changelog","previous_headings":"","what":"timaR 2.2.2","title":"timaR 2.2.2","text":"Minor fixes Additional benchmark figure (Correct hits repartition)","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-221","dir":"Changelog","previous_headings":"","what":"timaR 2.2.1","title":"timaR 2.2.1","text":"Minor version name fixes","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-220","dir":"Changelog","previous_headings":"","what":"timaR 2.2.0","title":"timaR 2.2.0","text":"Various fixes Added benchmark ()","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-210","dir":"Changelog","previous_headings":"","what":"timaR 2.1.0","title":"timaR 2.1.0","text":"Fixes, deletion binary dependencies.","code":""},{"path":"https://taxonomicallyinformedannotation.github.io/tima-r/news/index.html","id":"timar-200","dir":"Changelog","previous_headings":"","what":"timaR 2.0.0","title":"timaR 2.0.0","text":"Initial version.","code":""}]
